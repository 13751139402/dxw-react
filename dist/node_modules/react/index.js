(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
	typeof define === 'function' && define.amd ? define(factory) :
	(global = typeof globalThis !== 'undefined' ? globalThis : global || self, (global.index = global.index || {}, global.index.js = factory()));
})(this, (function () { 'use strict';

	// ReactSymbols: 为了防止滥用ReactElement,给ReactElement定义一个独一无二的值
	const supportSymbol = typeof Symbol === 'function' && Symbol.for;
	const REACT_ELEMENT_TYPE = supportSymbol
	    ? Symbol.for('react.element')
	    : 0xeac7;

	// ReactElement
	// 与环境无关的共享函数
	const ReactElement = function (type, key, ref, props) {
	    const element = {
	        $$typeof: REACT_ELEMENT_TYPE,
	        key,
	        ref,
	        props,
	        __mark: 'KaSong'
	    };
	    return element;
	};
	// v18的jsx函数就是v17的createReactElement
	const jsx = (type, config, ...maybeChildren) => {
	    let reactKey = null;
	    const props = {};
	    let ref = null;
	    Object.entries(config).forEach(([key, val]) => {
	        switch (key) {
	            case 'key':
	                reactKey = '' + val;
	                break;
	            case 'ref':
	                ref = val;
	                break;
	            default:
	                props[key] = val;
	                break;
	        }
	    });
	    const maybeChildrenLength = maybeChildren.length;
	    if (maybeChildrenLength === 1) {
	        props.children = maybeChildren[0];
	    }
	    else {
	        props.children = maybeChildren;
	    }
	    return ReactElement(type, reactKey, ref, props);
	};

	var index = {
	    Version: '0.0.0',
	    createElement: jsx
	};

	return index;

}));
